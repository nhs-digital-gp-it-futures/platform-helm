# Azure pipeline to build & publish buying catalogue system
# Some parts based on https://cloudblogs.microsoft.com/opensource/2018/11/27/tutorial-azure-devops-setup-cicd-pipeline-kubernetes-docker-helm/

trigger:
  batch: true
  branches:
    include:
      - master
      - feature/*

pr:
- master

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: packageAndPublish
  displayName: Package And Publish Buyingcatalogue
  # pool:
  #   name: GP IT Futures AKS Build Agents
  variables:
    - group: dev-secrets
  steps:
  - task: UseGitVersion@5
    displayName: gitversion
    inputs:
      versionSpec: '5.x'

  - task: HelmInstaller@1
    displayName: 'install helm'
    inputs:
      helmVersionToInstall: 'latest'
  - bash: |
      helm repo add gpitfuturesdevacr https://gpitfuturesdevacr.azurecr.io/helm/v1/repo --username gpitfuturesdevacr --password $(gpitfuturesdevacr-pass)
      helm dependency update src/buyingcatalogue
      helm package \
          --version $(GitVersion.SemVer) \
          --app-version $(GitVersion.SemVer) \
          src/buyingcatalogue
    displayName: 'helm package'
  - bash: |
      chartPackage=$(ls buyingcatalogue-*.tgz)
      echo "Chart Package $chartPackage"
      sudo apt-get update -o Dir::Etc::sourcelist="sources.list.d/azure-cli.list" -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0"
      sudo apt-get install --only-upgrade -y azure-cli
      az --version
      az acr helm push --force \
          -n gpitfuturesdevacr \
          -u gpitfuturesdevacr \
          -p $(gpitfuturesdevacr-pass) \
          $chartPackage
      echo $(jq -n --arg version "$(GitVersion.SemVer)" '{helmChartVersion: $version}') > $(build.artifactStagingDirectory)/variables.json
    failOnStderr: true
    name: helmPush
    displayName: 'az acr helm push'
  - script: echo "##vso[task.setvariable variable=semVer;isOutput=true]$(GitVersion.SemVer)"
    name: setVersionStep  
  - bash: |
      echo "semver $(setVersionStep.semVer), MajorMinorPatch $(GitVersion.MajorMinorPatch), Reason $(Build.Reason), Branch $(Build.SourceBranch), BranchName $(Build.SourceBranchName)"
      if [ $(Build.Reason) = "PullRequest" ]
      then
        echo "PRID $(System.PullRequest.PullRequestId), PRNumber $(System.PullRequest.PullRequestNumber), PRSource $(System.PullRequest.SourceBranch), Target $(System.PullRequest.TargetBranch)"
      fi
      env | sort
    name: echovar

  - task: CopyFiles@2
    inputs:
      SourceFolder: 'environments'
      Contents: '**'
      TargetFolder: '$(build.artifactStagingDirectory)/environments'
      CleanTargetFolder: false
      OverWrite: true

  - task: CopyFiles@2
    inputs:
      SourceFolder: ''
      Contents: '*.sh'
      TargetFolder: '$(build.artifactStagingDirectory)'
      CleanTargetFolder: false
      OverWrite: true
  - publish: $(build.artifactStagingDirectory)
    artifact: build-artifact 

- job: deployToDev
  dependsOn: packageAndPublish
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
  variables:
    - group: dev-secrets
    - name: semVer
      value: $[ dependencies.packageAndPublish.outputs['setVersionStep.semVer'] ]
    - name: sqlPackageArgs
      value: "/p:DatabaseEdition=Standard /p:DatabaseServiceObjective=S0"
  steps:
  - bash: |
      if [ $(Build.Reason) = "PullRequest" ]
      then
        namespace=`echo 'bc-$(Build.SourceBranchName)-$(System.PullRequest.PullRequestNumber)' | sed 's/[[:punct:]]/-/g'`
      else
        namespace=`echo 'bc-$(Build.SourceBranchName)' | sed 's/[[:punct:]]/-/g'`
      fi
      echo "namespace=$namespace, basePath=$basePath, baseUrl=$baseUrl, baseIdentityUrl"
      echo "##vso[task.setvariable variable=Namespace;isOutput=true]$namespace"
    name: DeployVars

  - task: AzureCLI@2
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: 'az aks get-credentials -n gpitfutures-dev-aks -g gpitfutures-dev-rg-aks'
    name: kubectlContext
    displayName: Get Kubernetes Context
  - bash: |
      helm repo add gpitfuturesdevacr https://gpitfuturesdevacr.azurecr.io/helm/v1/repo --username gpitfuturesdevacr --password $(gpitfuturesdevacr-pass)
    name: addRepo
    displayName: Add gpitfuturesdevacr repo
  - bash: |
      ./launch-or-update-azure.sh -c remote \
        -n $(DeployVars.Namespace) \
        -d gpitfutures-dev-sql-pri.database.windows.net \
        -u $(gpitdevsqladminusername) \
        -p $(gpitdevsqladminpassword) \
        -w true \
        -v $(semVer) \
        -s "/p:DatabaseEdition=Standard /p:DatabaseServiceObjective=S0" \
        -a "$(gpitdevstorageaccountconnectionstring)" \
        -i "51.11.46.27" \
        -r $(srt-redishost) \
        -q $(srt-redispass)
    name: deploySystem
    displayName: Deploy System

- job: cleanUpDynamicEnv
  dependsOn: packageAndPublish
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  variables:
    - group: dev-secrets
    - name: semVer
      value: $[ dependencies.packageAndPublish.outputs['setVersionStep.semVer'] ]
  steps:
  - task: AzureCLI@2
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: 'az aks get-credentials -n gpitfutures-dev-aks -g gpitfutures-dev-rg-aks'
    name: kubectlContext
    displayName: Get Kubernetes Context
  - bash: |
      helm repo add gpitfuturesdevacr https://gpitfuturesdevacr.azurecr.io/helm/v1/repo --username gpitfuturesdevacr --password $(gpitfuturesdevacr-pass)
    name: addRepo
    displayName: Add gpitfuturesdevacr repo
  - bash: |
      ./tear-down-azure.sh -m '$(Build.SourceVersionMessage)' \
        -d gpitfutures-dev-sql-pri \
        -g gpitfutures-dev-rg-sql-pri \
        -a "$(gpitdevstorageaccountconnectionstring)"
    name: cleanUpEnvironments

# TODO
# - job: runAcceptanceTests
#   dependsOn: packageAndPublish
#   variables:
#     - group: dev-secrets
#   steps:
#     public browse
#     marketing pages
#     admin
#     order
#     identity

  