# Azure pipeline to build & publish buying catalogue system
# Some parts based on https://cloudblogs.microsoft.com/opensource/2018/11/27/tutorial-azure-devops-setup-cicd-pipeline-kubernetes-docker-helm/

trigger:
  batch: true
  branches:
    include:
      - master
      - feature/*

pr:
- master

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: packageAndPublish
  displayName: Package And Publish Buyingcatalogue
  # pool:
  #   name: GP IT Futures AKS Build Agents
  variables:
    - group: dev-acr-secrets
  steps:
  - task: UseGitVersion@5
    displayName: gitversion
    inputs:
      versionSpec: '5.x'
  - task: HelmInstaller@1
    displayName: 'install helm'
    inputs:
      helmVersionToInstall: 'latest'
  - bash: |
      helm repo add gpitfuturesdevacr https://gpitfuturesdevacr.azurecr.io/helm/v1/repo --username gpitfuturesdevacr --password $(gpitfuturesdevacr-pass)            
      helm dependency update src/buyingcatalogue          
      helm package \
          --version $(GitVersion.SemVer) \
          --app-version $(GitVersion.SemVer) \
          src/buyingcatalogue
    displayName: 'helm package'
  - bash: |            
      chartPackage=$(ls buyingcatalogue-*.tgz)      
      echo "Chart Package $chartPackage"
      sudo apt-get update -o Dir::Etc::sourcelist="sources.list.d/azure-cli.list" -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0"
      sudo apt-get install --only-upgrade -y azure-cli
      az --version
      az acr helm push --force \
          -n gpitfuturesdevacr \
          -u gpitfuturesdevacr \
          -p $(gpitfuturesdevacr-pass) \
          $chartPackage
      echo $(jq -n --arg version "$(GitVersion.SemVer)" '{helmChartVersion: $version}') > $(build.artifactStagingDirectory)/variables.json      
    failOnStderr: true               
    name: helmPush
    displayName: 'az acr helm push'
  - script: echo "##vso[task.setvariable variable=semVer;isOutput=true]$(GitVersion.SemVer)"
    name: setVersionStep  
  - bash: |
      echo "semver $(setVersionStep.semVer), MajorMinorPatch $(GitVersion.MajorMinorPatch), Reason $(Build.Reason), Branch $(Build.SourceBranch), BranchName $(Build.SourceBranchName)"
      if [ $(Build.Reason) = "PullRequest" ]
      then
        echo "PRID $(System.PullRequest.PullRequestId), PRNumber $(System.PullRequest.PullRequestNumber), PRSource $(System.PullRequest.SourceBranch), Target $(System.PullRequest.TargetBranch)"
      fi
      env | sort
    name: echovar
  - task: CopyFiles@2
    inputs:
      SourceFolder: 'environments'
      Contents: '**'
      TargetFolder: '$(build.artifactStagingDirectory)/environments'
      CleanTargetFolder: true
      OverWrite: true
  - publish: $(build.artifactStagingDirectory)
    artifact: build-artifact
    condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
- job: deployToDev
  dependsOn: packageAndPublish
  variables:
    - group: dev-acr-secrets
    - name: semVer
      value: $[ dependencies.packageAndPublish.outputs['setVersionStep.semVer'] ]
  steps:
  - bash: | 
      if [ $(Build.Reason) = "PullRequest" ]
      then
        namespace=`echo 'buyingcatalogue-$(Build.SourceBranchName)-$(System.PullRequest.PullRequestNumber)' | sed 's/[[:punct:]]/-/g'`
      else
        namespace=`echo 'buyingcatalogue-$(Build.SourceBranchName)' | sed 's/[[:punct:]]/-/g'`
      fi
      basePath="$namespace-dev.buyingcatalogue.digital.nhs.uk"
      baseUrl="https://$basePath"
      baseIdentityUrl="$baseUrl/identity"
      echo "namespace=$namespace, basePath=$basePath, baseUrl=$baseUrl, baseIdentityUrl"
      echo "##vso[task.setvariable variable=Namespace;isOutput=true]$namespace"
      echo "##vso[task.setvariable variable=BasePath;isOutput=true]$basePath"
      echo "##vso[task.setvariable variable=BaseUrl;isOutput=true]$baseUrl"
      echo "##vso[task.setvariable variable=BaseIdentityUrl;isOutput=true]$baseIdentityUrl"
    name: DeployVars
    # create namespace if it doesn't exist
  - task: Kubernetes@1
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      azureResourceGroup: 'gpitfutures-dev-rg-aks'
      kubernetesCluster: 'gpitfutures-dev-aks'
      command: 'apply'
      useConfigurationFile: true
      configurationType: 'inline'
      inline: |
        {
          "apiVersion": "v1",
          "kind": "Namespace",
          "metadata": {
            "name": "$(DeployVars.Namespace)",
            "labels": {
              "name": "$(DeployVars.Namespace)"
            }
          }
        }
      secretType: 'dockerRegistry'
      containerRegistryType: 'Azure Container Registry'
  - bash: |      
      helm repo add \
      gpitfuturesdevacr \
      https://gpitfuturesdevacr.azurecr.io/helm/v1/repo \
      --username gpitfuturesdevacr \
      --password $(gpitfuturesdevacr-pass)
    failOnStderr: true
    displayName: 'helm repo add'
    # deploy chart to namespace
  - task: HelmDeploy@0
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      azureResourceGroup: 'gpitfutures-dev-rg-aks'
      kubernetesCluster: 'gpitfutures-dev-aks'
      namespace: '$(DeployVars.Namespace)'
      command: 'upgrade'
      chartType: 'Name'
      chartName: 'gpitfuturesdevacr/buyingcatalogue'
      releaseName: 'bc'
      overrideValues:
      valueFile: 'environments/azure.yaml'
      arguments: >   
        --version $(semVer)
        --timeout 10m0s
        --set dbPassword=$(gpitfuturesdevdbpassword)-$(DeployVars.Namespace)
        --set clientSecret=$(gpitfuturesdevclientsecret)-$(DeployVars.Namespace)
        --set appBaseUrl=$(DeployVars.BaseUrl)
        --set baseIsapiEnabledUrl=$(DeployVars.BaseIdentityUrl)
        --set isapi.clients[0].redirectUrls[0]=$(DeployVars.BaseUrl)/oauth/callback
        --set isapi.clients[0].redirectUrls[1]=$(DeployVars.BaseUrl)/admin/oauth/callback
        --set isapi.clients[0].redirectUrls[2]=$(DeployVars.BaseUrl)/order/oauth/callback
        --set isapi.clients[0].postLogoutRedirectUrls[0]=$(DeployVars.BaseUrl)/signout-callback-oidc
        --set isapi.clients[0].postLogoutRedirectUrls[1]=$(DeployVars.BaseUrl)/admin/signout-callback-oidc
        --set isapi.clients[0].postLogoutRedirectUrls[2]=$(DeployVars.BaseUrl)/order/signout-callback-oidc
        --set isapi.ingress.hosts[0].host=$(DeployVars.BasePath)
        --set isapi.hostAliases[0].hostnames[0]=$(DeployVars.BasePath)
        --set oapi.hostAliases[0].hostnames[0]=$(DeployVars.BasePath)
        --set ordapi.hostAliases[0].hostnames[0]=$(DeployVars.BasePath)
        --set email.ingress.hosts[0].host=$(DeployVars.BasePath)
        --set mp.ingress.hosts[0].host=$(DeployVars.BasePath)
        --set pb.ingress.hosts[0].host=$(DeployVars.BasePath)
        --set pb.baseUri=$(DeployVars.BaseUrl)
        --set pb.hostAliases[0].hostnames[0]=$(DeployVars.BasePath)
        --set admin.ingress.hosts[0].host=$(DeployVars.BasePath)
        --set admin.hostAliases[0].hostnames[0]=$(DeployVars.BasePath)
        --set of.ingress.hosts[0].host=$(DeployVars.BasePath)
        --set of.hostAliases[0].hostnames[0]=$(DeployVars.BasePath)
        --set redis-commander.ingress.hosts[0].host=$(DeployVars.BasePath)
# - job: runAcceptanceTests
#   dependsOn: packageAndPublish
#   variables:
#     - group: dev-acr-secrets
#   steps:
    # public browse
    # marketing pages
    # admin
    # order
    # identity

  