trigger:
  batch: true
  branches:
    include:
      - master
      - feature/*
  paths:
    include:
    - /*
    exclude:
    - housekeeping/*
    - docs/*

pr:
  branches:
    include:
    - master
  paths:
    include:
    - /*
    exclude:
    - housekeeping/*
    - docs/*

# resources:
#   pipelines:
#   - pipeline: bapi   # Name of the pipeline resource
#     source: nhs-digital-gp-it-futures.BuyingCatalogueService # Name of the triggering pipeline
#     trigger: 
#       branches:
#         include:
#         - feature/*
#         - development
#         - master
        
#   - pipeline: dapi   
#     source: nhs-digital-gp-it-futures.BuyingCatalogueDocumentService
#     trigger: 
#       branches:
#         include:
#         - feature/*
#         - development
#         - master

#   - pipeline: isapi   
#     source: nhs-digital-gp-it-futures.BuyingCatalogueIdentity
#     trigger: 
#       branches:
#         include:
#         - feature/*
#         - development
#         - master

#   - pipeline: ordapi   
#     source: nhs-digital-gp-it-futures.BuyingCatalogueOrdering
#     trigger: 
#       branches:
#         include:
#         - feature/*
#         - development
#         - master

#   - pipeline: mp   
#     source: nhs-digital-gp-it-futures.marketing-pages
#     trigger: 
#       branches:
#         include:
#         - feature/*
#         - development
#         - master

#   - pipeline: pb   
#     source: nhs-digital-gp-it-futures.public-browse
#     trigger: 
#       branches:
#         include:
#         - feature/*
#         - development
#         - master

#   - pipeline: admin   
#     source: nhs-digital-gp-it-futures.buying-catalogue-admin
#     trigger: 
#       branches:
#         include:
#         - feature/*
#         - development
#         - master

#   - pipeline: of   
#     source: nhs-digital-gp-it-futures.order-form
#     trigger: 
#       branches:
#         include:
#         - feature/*
#         - development
#         - master

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: packageAndPublish
  displayName: Package And Publish Buyingcatalogue
  variables:
    - group: dev-secrets
  steps:
  - task: UseGitVersion@5
    displayName: gitversion
    inputs:
      versionSpec: '5.x'

  - task: HelmInstaller@1
    displayName: 'install helm'
    inputs:
      helmVersionToInstall: 'latest'
  - bash: |
      helm repo add gpitfuturesdevacr https://gpitfuturesdevacr.azurecr.io/helm/v1/repo --username gpitfuturesdevacr --password $(gpitfuturesdevacr-pass)
      helm dependency update src/buyingcatalogue
      helm package \
          --version $(GitVersion.SemVer) \
          --app-version $(GitVersion.SemVer) \
          src/buyingcatalogue
    displayName: 'helm package'

  - bash: |
      chartPackage=$(ls buyingcatalogue-*.tgz)
      echo "Chart Package $chartPackage"
      az acr helm push --force \
          -n gpitfuturesdevacr \
          -u gpitfuturesdevacr \
          -p $(gpitfuturesdevacr-pass) \
          $chartPackage
      echo $(jq -n --arg version "$(GitVersion.SemVer)" '{helmChartVersion: $version}') > $(build.artifactStagingDirectory)/variables.json
    failOnStderr: false
    name: helmPush
    displayName: 'az acr helm push'

  - script: echo "##vso[task.setvariable variable=semVer;isOutput=true]$(GitVersion.SemVer)"
    name: setVersionStep  

  - bash: |
      echo "semver $(setVersionStep.semVer), MajorMinorPatch $(GitVersion.MajorMinorPatch), Reason $(Build.Reason), Branch $(Build.SourceBranch), BranchName $(Build.SourceBranchName)"
      if [ $(Build.Reason) = "PullRequest" ]
      then
        echo "PRID $(System.PullRequest.PullRequestId), PRNumber $(System.PullRequest.PullRequestNumber), PRSource $(System.PullRequest.SourceBranch), Target $(System.PullRequest.TargetBranch)"
      fi
      env | sort
    name: echovar

  - task: CopyFiles@2
    inputs:
      SourceFolder: 'environments'
      Contents: '**'
      TargetFolder: '$(build.artifactStagingDirectory)/environments'
      CleanTargetFolder: false
      OverWrite: true
    displayName: Copy environments folder

  - task: CopyFiles@2
    inputs:
      SourceFolder: 'selenium-grid'
      Contents: '**'
      TargetFolder: '$(build.artifactStagingDirectory)/selenium-grid'
      CleanTargetFolder: false
      OverWrite: true
    displayName: Copy selenium-grid folder

  - task: CopyFiles@2
    inputs:
      SourceFolder: ''
      Contents: '*.sh'
      TargetFolder: '$(build.artifactStagingDirectory)'
      CleanTargetFolder: false
      OverWrite: true
    displayName: Copy scripts

  - publish: $(build.artifactStagingDirectory)
    artifact: build-artifact 

- job: prepareEnvironment
  displayName: Prepare Environment
  dependsOn: packageAndPublish
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
  variables:
    - group: dev-secrets
    - name: semVer
      value: $[ dependencies.packageAndPublish.outputs['setVersionStep.semVer'] ]
  steps:
  - task: AzureCLI@2
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: 'az aks get-credentials -n gpitfutures-development-aks -g gpitfutures-development-rg-aks'
    name: kubectlContext
    displayName: Get Kubernetes Context

  - bash: './determine-namespace.sh'
    name: DeployVars
    displayName: Set up environment variables for deployment
  
  - bash: |
      helm repo add gpitfuturesdevacr https://gpitfuturesdevacr.azurecr.io/helm/v1/repo --username gpitfuturesdevacr --password $(gpitfuturesdevacr-pass)
    name: addRepo
    displayName: Add gpitfuturesdevacr repo
    condition: eq(variables['Build.Reason'], 'ResourceTrigger')

  - bash: |
      buildNameVariableName=$(compgen -A variable | grep 'RESOURCES_PIPELINE_.*RUNNAME')
      component=$(echo $buildNameVariableName | cut -d_ -f3)
      version=$(echo ${!buildNameVariableName} | cut -d' ' -f1 )
      arg="$component=$version"
      ./update-chart-versions.sh -m $(DeployVars.Namespace) -o $arg
    name: UpdateVersions
    displayName: Grab and update component versions
    condition: eq(variables['Build.Reason'], 'ResourceTrigger')

- job: deployToDev
  displayName: Deploy to Development Env
  dependsOn:
    - packageAndPublish 
    - prepareEnvironment
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
  variables:
    - group: dev-core-secrets
    - name: semVer
      value: $[ dependencies.packageAndPublish.outputs['setVersionStep.semVer'] ]
    - name: namespace
      value: $[ dependencies.prepareEnvironment.outputs['DeployVars.Namespace'] ]
    - name: sqlPackageArgs
      value: "/p:DatabaseEdition=Standard /p:DatabaseServiceObjective=S0"

  steps:
  - task: AzureCLI@2
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: 'az aks get-credentials -n gpitfutures-development-aks -g gpitfutures-development-rg-aks'
    name: kubectlContext
    displayName: Get Kubernetes Context

  - task: HelmInstaller@1
    displayName: 'install helm'
    inputs:
      helmVersionToInstall: 'latest'

  - task: AzureCLI@2
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
          acr="gpitfuturesdevacr"

          acrUsername=$(az acr credential show --name $acr --query username -o tsv)
          acrPassword=$(az acr credential show --name $acr --query passwords[0].value -o tsv)
          acrLoginSvr=$(az acr list --query "[?name=='$acr'].loginServer" -o tsv)

          helm repo add $acr https://$acrLoginSvr/helm/v1/repo --username $acrUsername --password $acrPassword
          helm repo add stable https://charts.helm.sh/stable/
          helm repo update
    name: addRepos
    displayName: Add gpitfuturesdevacr & stable repo

  - bash: |
        cd selenium-grid 
        ./launch-selenium-grid.sh --add "$(namespace).dev.buyingcatalogue.digital.nhs.uk"
    name: setupSeleniumGrid
    displayName: Setup Selenium Grid

  - bash: |
      ping -c 30 127.0.0.1
    name: delayNextStep
    displayName: Delay Next Step

  - task: AzureCLI@2
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
          sqlDbAdminUser=$(az sql server list --query "[?name=='gpitfutures-development-sql-pri'].administratorLogin" -o tsv)
          sqlDbAdminPass=$(az keyvault secret show --vault-name gpit-development-kv --name "gpitdevelopmentsqladminpassword" --query value -o tsv)
          saConnectionString=$(az storage account show-connection-string --name gpitfuturesdevelopment --resource-group gpitfutures-development-rg-sa --query connectionString -o tsv)
          appgwPip=$(az network public-ip show --name gpitfutures-development-pip --resource-group gpitfutures-development-rg-appgw --query ipAddress -o tsv)
          redisHost=$(az redis show --resource-group gpitfutures-dev-core-rg-redis --name gpitfutures-dev-core-redis --query hostName -o tsv)
          redisPass=$(az redis list-keys --resource-group gpitfutures-dev-core-rg-redis --name gpitfutures-dev-core-redis --query primaryKey -o tsv)

          ./launch-or-update-azure.sh \
          -c remote \
          -n $(namespace) \
          -d gpitfutures-development-sql-pri.database.windows.net \
          -u $sqlDbAdminUser \
          -p $sqlDbAdminPass \
          --base-path "$(namespace).dev.buyingcatalogue.digital.nhs.uk" \
          -w true \
          -v $(semVer) \
          -s "/p:DatabaseEdition=Standard /p:DatabaseServiceObjective=S0" \
          -a "$saConnectionString" \
          -i "$appgwPip" \
          -r $redisHost \
          -q $redisPass \
          --cookie-secret=$(srt-cookiesecret) \
          --client-secret=$(srt-clientsecret) \
          --db-user-pass=$(srt-sqldevdbpass) \
          -f "azure-dev.yaml"  
    name: deploySystem
    displayName: Deploy System

  # - bash: |
  #     ./launch-or-update-azure.sh -c remote \
  #       -n $(namespace) \
  #       -d gpitfutures-dev-sql-pri.database.windows.net \
  #       -u $(gpitdevsqladminusername) \
  #       -p $(gpitdevsqladminpassword) \
  #       -w true \
  #       -v $(semVer) \
  #       -s "/p:DatabaseEdition=Standard /p:DatabaseServiceObjective=S0" \
  #       -a "$(gpitdevstorageaccountconnectionstring)" \
  #       -r $(srt-redishost) \
  #       -q $(srt-redispass) \
  #       --db-user-pass $(gpitfuturesdevdbpassword) \
  #       -f "azure-dev.yaml"
  #   name: deploySystem
  #   displayName: Deploy System

  - bash: |
      ping -c 240 127.0.0.1
    name: delayNextStep2
    displayName: Delay Next Step (4 mins)

  - bash: './get-test-results.sh -v $(semVer) -n $(namespace)'
    displayName: Grab test results

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'VSTest'
      testResultsFiles: '**/*.trx' 
      mergeTestResults: true
      failTaskOnFailedTests: false
      testRunTitle: 'Acceptance test results'
      publishRunAttachments: true

- job: cleanUpBranchEnv
  displayName: Clean up Branch Env
  dependsOn: packageAndPublish
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  variables:
    - group: dev-secrets
    - name: semVer
      value: $[ dependencies.packageAndPublish.outputs['setVersionStep.semVer'] ]
  steps:
  - task: AzureCLI@2
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: 'az aks get-credentials -n gpitfutures-dev-aks -g gpitfutures-dev-rg-aks'
    name: kubectlContext
    displayName: Get Kubernetes Context

  - task: HelmInstaller@1
    displayName: 'install helm'
    inputs:
      helmVersionToInstall: 'latest'

  - bash: |
      helm repo add gpitfuturesdevacr https://gpitfuturesdevacr.azurecr.io/helm/v1/repo --username gpitfuturesdevacr --password $(gpitfuturesdevacr-pass)
    name: addRepo
    displayName: Add gpitfuturesdevacr
    
  - task: AzureCLI@2
    inputs:
      azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
      scriptType: 'bash'
      scriptLocation: 'scriptPath'
      scriptPath: 'tear-down-azure.sh'
      arguments: '-m "$(Build.SourceVersionMessage)" -d gpitfutures-dev-sql-pri -g gpitfutures-dev-rg-sql-pri -a "$(gpitdevstorageaccountconnectionstring)"'
    name: cleanUp
    displayName: Clean up dynamic environments

# TODO
# - job: runAcceptanceTests
#   dependsOn: packageAndPublish
#   variables:
#     - group: dev-secrets
#   steps:
#     public browse
#     marketing pages
#     admin
#     order
#     identity  
